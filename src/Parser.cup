import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

public void syntax_error(Symbol current_token) {
	report_error(
		"Syntax error at line " + (current_token.left+1) + ", column " 
		+ current.token.right, null
);
}

:};

// Do something with ILLEGAL_CHARARCTER or drop it.
terminal DIC, SEQ, TOP, MAIN, IN, TDEF, FDEF, ALIAS, VOID, READ, PRINT, IF, FI, WHILE, THEN, DO, OD, ELSE, ELIF, FORALL, RETURN, INT, FLOAT, RAT, BOOL ;
terminal Integer, Float, Boolean, Rational, Character;
terminal IDENTIFIER, SEMICOL, PLUS, MINUS, ASSIGN, MULT, DIV, LPAREN, RPAREN, LBRACE, RBRACE, POW, LOGAND, LOGOR, NOT, EQUAL, NOTEQUAL, LESS, LESSEQ;
terminal GREATER, GREATEREQ, COMMA, CONCAT, QUOTE, DOT, LBRCKT, RBRCKT, COLON, LEN, LET;

nonterminal program, main, rest, function_body, 


precedence left PLUS, MINUS;
precedence left DIV, MULT;

start with program;

program ::= rest main rest;

main ::= MAIN LBRACE function_body RBRACE SEMICOL;

rest ::= var_declaration SEMICOL rest
		|func_declaration SEMICOL rest
		|type_declaration SEMICOL rest
		|alias SEMICOL rest
		|
		;

function_body ::= declaration_list statement_list;

declaration_list ::= var_declaration SEMICOL declaration_list
					|func_declaration SEMICOL declaration_list
					|type_declaration SEMICOL declaration_list
					|
					;

statement_list ::= assignment SEMICOL statement_list
				   |input SEMICOL statement_list
				   |output SEMICOL statement_list
				   |function_call SEMICOL statement_list
				   |control_flow SEMICOL statement_list
				   |
				   ;

assignment ::= ID ASSIGN expr_list;

input ::= READ ID;

output ::= PRINT expr;

function_call ::= ID LPAREN expr_list RPAREN;

control_flow ::= ifblock
				| IF LPAREN expr RPAREN THEN body ELSE body FI
				| WHILE LPAREN expr RPAREN DO body OD
				| FORALL LPAREN item IN interable RPAREN DO body OD
				| RETURN expr SEMI
				;

ifblock ::=IF LPAREN expr RPAREN THEN body elseifblock elseblock FI;

elseifblock ::= ELIF LPAREN expr RPAREN THEN body elseifblock
				|
				;

elseblock ::= ELSE body
			  |
			  ;
			
operator ::= numeric_op | boolean_op | dictionary_op | sequence_op | comparison_op;

numeric_op ::= PLUS | MINUS | MULT | DIV | POW;

boolean_op ::=	NOT | LOGAND | LOGOR;

dictionary_op ::= IN | ID LBRCKT expr RBRCKT | len;

secquence_op ::= IN 
				 | CONCAT	
				 | len 
				 | ID LBRCKT expr RBRCKT	
				 | ID LBRCKT (expr COLON expr | expr COLON | COLON expr) RBRCKT ;
							
comparison_op ::= LESS 
				  | LESSEQ
				  | GREATER
				  | GREATEREQ
				  | EQUAL
				  | NOTEQUAL 
				  ;

len ::= LEN LPAREN ID RPAREN;

dict ::= DICT LANGLB type COMMA type RANGLB
			;

seq 		::=			SEQ LANGLB type RANGLB
			;		


				


				


				




				

			
expr ::=

expr_list ::=

body ::=












top_level ::= statements:ss {:
                if(debug()) System.out.println((Node)ss);
              :}
            ;

statements ::= statements:ss statement:s {:
                  Node n = (Node)ss;
                  n.addChild((Node)s);
                  RESULT = n;
               :}
             | /* empty */ {:
                  RESULT = new Node("Statements");
               :}
             ;

statement ::= let_bind:s {:
                RESULT = (Node)s;
              :}
            | full_exp:s {:
                RESULT = (Node)s;
              :}
            ;

full_exp ::= simple_exp:e SEMICOL {: RESULT = (Node)e; :};

simple_exp ::= Integer:i    {: RESULT = new Node(i); :}
             | IDENTIFIER:i {: RESULT = new Node(i); :}
             | simple_exp:e1 operator:o simple_exp:e2 {:
                  Node n = (Node)o;
                  n.addChild((Node)e1);
                  n.addChild((Node)e2);
                  RESULT = n;
               :}
             | LPAREN simple_exp:e RPAREN {:
                 Node n = new Node("parens");
                 n.addChild(new Node("("));
                 n.addChild((Node)e);
                 n.addChild(new Node(")"));
                 RESULT = (Node)e;
               :}
             ;

operator ::= PLUS  {: RESULT = new Node("+"); :}
           | MINUS {: RESULT = new Node("-"); :}
           | MULT  {: RESULT = new Node("*"); :}
           | DIV   {: RESULT = new Node("/"); :}
           ;

let_bind ::= LET IDENTIFIER:i EQUAL full_exp:e {:
               Node n = new Node("LET");
               n.addChild(new Node(i));
               n.addChild((Node)e);
               RESULT = n;
             :};
